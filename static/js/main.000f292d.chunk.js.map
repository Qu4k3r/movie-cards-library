{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","createElement","className","Component","Rating","rating","this","props","defaultProps","undefined","MovieCard","movie","title","subtitle","storyline","imagePath","image","src","movieTitle","movieSubTitle","synopsis","cardBody","movieRating","MovieList","movies","map","eachMovie","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAUeA,E,uKALX,OAAOC,wBAAc,SAAU,CAAEC,UAAW,qBAC1CD,wBAAc,KAAM,CAAEC,UAAW,cAAgB,4B,GAHlCC,aCEfC,E,uKACM,IACAC,EAAWC,KAAKC,MAAhBF,OACR,OAAOJ,wBAAc,OAAQ,CAAEC,UAAW,UAAYG,O,GAHrCF,aAWrBC,EAAOI,aAAe,CACpBH,YAAQI,GAGKL,QCbTM,E,uKACM,IACAC,EAAUL,KAAKC,MAAfI,MACAC,EAAkDD,EAAlDC,MAAOC,EAA2CF,EAA3CE,SAAUC,EAAiCH,EAAjCG,UAAWC,EAAsBJ,EAAtBI,UAAWV,EAAWM,EAAXN,OAEzCW,EAAQf,wBAAc,MAAO,CAAEgB,IAAKF,EAAWb,UAAW,qBAC1DgB,EAAajB,wBAAc,KAAM,CAAEC,UAAW,oBAAsBU,GACpEO,EAAgBlB,wBAAc,KAClC,CAAEC,UAAW,uBAAyBW,GAClCO,EAAWnB,wBAAc,IAAK,CAAEC,UAAW,wBAA0BY,GACrEO,EAAWpB,wBAAc,MAC7B,CAAEC,UAAW,mBAAqBgB,EAAYC,EAAeC,GACzDE,EAAcrB,wBAAc,MAChC,CAAEC,UAAW,qBAAuB,kBAAC,EAAD,CAAQG,OAASA,KAEvD,OAAOJ,wBAAc,UAAW,CAAEC,UAAW,cAC3Cc,EAAOK,EAAUC,O,GAhBCnB,aAqCxBO,EAAUF,aAAe,CACvBG,MAAO,IAGMD,QC1CTa,E,uKACM,IACAC,EAAWlB,KAAKC,MAAhBiB,OACR,OACEvB,wBAAc,OAAQ,CAAEC,UAAW,cAAgBsB,EAAOC,KACxD,SAACC,GAAD,OAAe,kBAAC,EAAD,CAAWf,MAAQe,EAAYC,IAAMD,EAAUd,gB,GAL9CT,aAexBoB,EAAUf,aAAe,CACvBgB,OAAQ,IAGKD,QCaAC,EAtCA,CACb,CACEZ,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXT,OAAQ,IACRU,UAAW,2CAEb,CACEH,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXT,OAAQ,IACRU,UAAW,2CAEb,CACEH,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXT,OAAQ,EACRU,UAAW,qCAEb,CACEH,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXT,OAAQ,IACRU,UAAW,8BAEb,CACEH,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXT,OAAQ,IACRU,UAAW,sCCnBAa,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWsB,OAASA,MCENK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.000f292d.chunk.js","sourcesContent":["// implement Header component here\nimport { createElement, Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return createElement('header', { className: 'movie-card-header' },\n      createElement('h1', { className: 'page-title' }, 'Movie Cards Library'));\n  }\n}\n\nexport default Header;\n","// implement Rating component here\nimport { createElement, Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nclass Rating extends Component {\n  render() {\n    const { rating } = this.props;\n    return createElement('span', { className: 'rating' }, rating);\n  }\n}\n\nRating.propTypes = {\n  rating: PropTypes.number,\n};\n\nRating.defaultProps = {\n  rating: undefined,\n};\n\nexport default Rating;\n","// implement MovieCard component here\nimport React, { createElement, Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\n// Ao final, tentar passar a key por essa classe\nclass MovieCard extends Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, imagePath, rating } = movie;\n\n    const image = createElement('img', { src: imagePath, className: 'movie-card-image' });\n    const movieTitle = createElement('h4', { className: 'movie-card-title' }, title);\n    const movieSubTitle = createElement('h5',\n      { className: 'movie-card-subtitle' }, subtitle);\n    const synopsis = createElement('p', { className: 'movie-card-storyline' }, storyline);\n    const cardBody = createElement('div',\n      { className: 'movie-card-body' }, movieTitle, movieSubTitle, synopsis);\n    const movieRating = createElement('div',\n      { className: 'movie-card-rating' }, <Rating rating={ rating } />);\n\n    return createElement('section', { className: 'movie-card' },\n      image, cardBody, movieRating);\n    // <section>\n    //   {image}\n    //   {movieTitle}\n    //   {movieSubTitle}\n    //   {synopsis}\n    //   <Rating rating={ rating } />\n    // </section>\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n  }),\n};\n\nMovieCard.defaultProps = {\n  movie: {},\n};\n\nexport default MovieCard;\n","// implement MovieList component here\nimport React, { Component, createElement } from 'react';\n\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends Component {\n  render() {\n    const { movies } = this.props;\n    return (\n      createElement('main', { className: 'movie-list' }, movies.map(\n        (eachMovie) => <MovieCard movie={ eachMovie } key={ eachMovie.title } />,\n      ))\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object),\n};\n\nMovieList.defaultProps = {\n  movies: [],\n};\n\nexport default MovieList;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MovieList from './components/MovieList';\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieList movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}